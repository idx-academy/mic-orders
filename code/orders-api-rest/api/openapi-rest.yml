openapi: 3.0.1
info:
  title: Retail API
  description: API description in OpenAPI 3.0 format
  version: 0.0.1

servers:
  - url: http://localhost:8080/retail

security:
  - bearerAuth: [ ]

tags:
  - name: token
    description: Token retrieval

  - name: users
    description: Users endpoint

  - name: products
    description: Products endpoint

  - name: orders
    description: Orders endpoints

paths:
  /auth/login:
    post:
      tags:
        - token
      summary: Login user
      description: The endpoint login the user to the DB.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '../api/components/schemas.yml#/components/schemas/AuthTokenRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '../api/components/schemas.yml#/components/schemas/AuthTokenResponse'
        '400':
          $ref: '../api/components/responses.yml#/components/responses/BadRequestResponse'
        '404':
          $ref: '../api/components/responses.yml#/components/responses/NotFoundResponse'

  /v1/orders/{orderId}:
    get:
      tags:
        - orders
      summary: Get order by id
      operationId: getOrderById
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            description: Id of the order
            format: uuid
          example: '8efbee82-8a0c-407a-a4c0-16bbad40a23e'
      responses:
        '200':
          description: Order
          content:
            application/json:
              schema:
                $ref: '../api/components/schemas.yml#/components/schemas/Order'
        '404':
          $ref: '../api/components/responses.yml#/components/responses/NotFoundResponse'

  /v1/users/profile:
    get:
      tags:
        - users
      summary: Get information about user
      responses:
        '200':
          description: Information about user
          content:
            application/json:
              schema:
                $ref: '../api/components/schemas.yml#/components/schemas/User'
        '401':
          $ref: '../api/components/responses.yml#/components/responses/Unauthorized'

  /v1/products:
    get:
      tags:
        - products
      summary: Get list of products
      description: The endpoint for getting all products from database.
      responses:
        '200':
          description: Information about all products
          content:
            application/json:
              schema:
                $ref: '../api/components/schemas.yml#/components/schemas/Products'

  /v1/cart/products/{userId}:
    post:
      tags:
        - products
      summary: Add products to the cart
      description: The endpoint for adding a product to the user's shopping cart.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
            example: 1
          description: The User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
               $ref: '../api/components/schemas.yml#/components/schemas/Products'
      responses:
       '201':
         description: The card with added products was created
         content:
           application/json:
             schema:
               $ref: '../api/components/schemas.yml#/components/schemas/Cart'
       '400':
         $ref: '../api/components/responses.yml#/components/responses/BadRequestResponse'
       '404':
         $ref: '../api/components/responses.yml#/components/responses/NotFoundResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT