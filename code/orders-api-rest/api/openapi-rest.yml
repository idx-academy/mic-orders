openapi: 3.0.1
info:
  title: Retail API
  description: API description in OpenAPI 3.0 format
  version: 0.0.1

servers:
  - url: http://localhost:8080/retail

#TAGS
#=======================================================================================================================
tags:
  - name: Security
    description: Token retrieval

  - name: Products
    description: Products endpoint

  - name: ProductsManagement
    description: Endpoints for products management page

  - name: Orders
    description: Orders endpoints

  - name: OrdersManagement
    description: Endpoints for orders management page

  - name: Cart
    description: Cart management endpoints

  - name: UsersManagement
    description: Endpoints for users management page

#ENDPOINTS
#=======================================================================================================================
paths:
  /auth/sign-in:
    post:
      tags:
        - Security
      summary: Sign in account
      operationId: signIn
      description: The endpoint sign in account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/sign-up:
    post:
      tags:
        - Security
      summary: Register a new user
      operationId: signUp
      description: The endpoint registers a new user to the DB.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '409':
          $ref: '#/components/responses/Conflict'

  /v1/management/orders/{orderId}:
    get:
      tags:
        - OrdersManagement
      summary: Get order by id
      operationId: getOrderById
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            description: Id of the order
            format: uuid
          example: '8efbee82-8a0c-407a-a4c0-16bbad40a23e'
        - $ref: '#/components/parameters/Language'
      responses:
        '200':
          description: Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerOrder'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /v1/management/orders/{orderId}/status:
    patch:
      tags:
        - OrdersManagement
      summary: Update order statuses by order ID
      operationId: updateOrderStatus
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the order to update
          example: '8efbee82-8a0c-407a-a4c0-16bbad40a23e'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /v1/users/{userId}/orders:
    post:
      tags:
        - Orders
      summary: Place an order
      parameters:
        - $ref: '#/components/parameters/UserId'
      operationId: placeOrder
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderRequest'
      responses:
        '201':
          description: Order is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - Orders
      summary: View the orders history for user by id
      operationId: getOrdersByUser
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUserOrder'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /v1/users/{userId}/orders/{orderId}/cancel:
    patch:
      tags:
        - Orders
      summary: Cancel order status for user by order ID
      operationId: cancelOrder
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/UserId'
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the order to update
          example: '8efbee82-8a0c-407a-a4c0-16bbad40a23e'
      responses:
        '200':
          description: Order was canceled successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'


  /v1/management/orders:
    get:
      tags:
        - OrdersManagement
      summary: View all orders filtered and sorted
      description: Endpoint allows users to view all orders with optional filtering and sorting. It supports pagination, language localization, and requires bearer token authentication.
      operationId: getAllOrders
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: ordersFilter
          required: false
          schema:
            $ref: '#/components/schemas/OrdersFilterParameters'
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageManagerOrderPreview'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /v1/management/products/{productId}/status:
    patch:
      tags:
        - ProductsManagement
      summary: Change visibility status for product by id
      description: Endpoint allows users to change the visibility status of a specific product. The product is identified by productId, and the desired visibility status must be provided as a query parameter.
      operationId: updateStatus
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: status
          required: true
          description: Visibility status for product
          schema:
            $ref: '#/components/schemas/ProductStatus'
      responses:
        '200':
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /v1/management/products/{productId}:
    get:
      tags:
        - ProductsManagement
      summary: Get product by ID
      description: Endpoint retrieves details of a specific product by its productId.
      operationId: getProductById
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Successfully retrieved product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

    patch:
      tags:
        - ProductsManagement
      summary: Update existing product details
      description: Endpoint updates the details of an existing product identified by productId.
      operationId: updateProduct
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated successfully
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /v1/products:
    get:
      tags:
        - Products
      summary: Get list of products
      description: The endpoint for getting all products from the database.
      operationId: getProducts
      parameters:
        - in: query
          description: filter for products
          name: productFilter
          schema:
            $ref: '#/components/schemas/ProductFilter'
        - $ref: '#/components/parameters/Pageable'
          description: For sorting by product id/status/createdAt/quantity/price you need to add "product." before field and name/description you need to send just name or description followed by ',' asc or desc. For example, sort=product.price,desc or sort=name,desc.
        - $ref: '#/components/parameters/Language'
      responses:
        '200':
          description: Short information about all products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProducts'

  /v1/products/search:
    get:
      tags:
        - Products
      summary: Get page of products in search.
      description: The endpoint for getting page of short product info in search.
      operationId: searchProducts
      parameters:
        - in: query
          name: searchQuery
          required: true
          schema:
            minLength: 3
            pattern: '^(?!\s*$).+'
            type: string
            nullable: false
            example: phone
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Short information about all products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductSearchResult'
        '400':
          $ref: '#/components/responses/BadRequestResponse'

  /v1/products/{productId}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Endpoint retrieves the details of an existing product identified by productId. It supports optional language localization.
      operationId: getProductDetailsById
      parameters:
          - $ref: '#/components/parameters/ProductId'
          - $ref: '#/components/parameters/Language'
      responses:
          '200':
            description: Successfully retrieved product
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProductDetailsResponse'
          '400':
            $ref: '#/components/responses/BadRequestResponse'
          '404':
            $ref: '#/components/responses/NotFoundResponse'

  /v1/management/products:
    get:
      tags:
        - ProductsManagement
      summary: Get all information about products
      description: The endpoint retrieves all information about products
      operationId: getProductsForManager
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: productFilter
          schema:
            $ref: '#/components/schemas/ProductManagementFilter'
          description: filter for products
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Products
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProductManagementPage'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - ProductsManagement
      summary: Create a new product
      description: The endpoint for creating a new product in the management page
      operationId: createProduct
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'

  /v1/users/{userId}/cart/{productId}:
    post:
      tags:
        - Cart
      summary: Add products to the cart
      description: The endpoint for adding a product to the user's shopping cart.
      operationId: addProductToCart
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '201':
          description: The card with added products was created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/Conflict'

  /v1/users/{userId}/cart/items/{productId}:
    delete:
      tags:
        - Cart
      summary: Delete product from user`s cart
      description: The endpoint for deleting product from the user`s cart
      operationId: deleteProductFromCart
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/ProductId"
      responses:
        '204':
          description: Product successfully deleted form user`s cart
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /v1/users/{userId}/cart/items:
    get:
      tags:
        - Cart
      summary: Get user`s cart items
      description: The endpoint retrieves user`s cart items
      operationId: getCartItems
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Language'
      responses:
        '200':
          description: Information about cart items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /v1/users/{userId}/cart/{productId}/setquantity:
    patch:
      tags:
        - Cart
      summary: Set new quantity of the cart item
      description: The endpoint sets a new quantity for a specific product in the user's cart.
      operationId: setCartItemQuantity
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/ProductId'
        - in: query
          name: quantity
          required: true
          schema:
            type: integer
            minimum: 1
          example: 5
      responses:
        '200':
          description: The quantity of the product in the cart was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedCartItem'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/Conflict'
  /v1/management/users/{userId}/status:
    patch:
      tags:
        - UsersManagement
      operationId: changeUserStatus
      summary: Block/unblock user's account
      description: The endpoint change status of user's account
      parameters:
        - $ref: '#/components/parameters/UserId'
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/AccountStatus'
      responses:
        '204':
          description: Status was updated
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /v1/management/users:
    get:
      tags:
        - UsersManagement
      summary: Get list of all users
      description: The endpoint for getting all accounts from the database.
      operationId: getAccounts
      parameters:
        - in: query
          description: filter for accounts
          name: accountFilter
          schema:
            $ref: '#/components/schemas/AccountFilter'
        - $ref: '#/components/parameters/Pageable'
      responses:
        '200':
          description: Short information about all accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAccounts'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'



#COMPONENTS
#=======================================================================================================================
components:

#PARAMETERS
#=======================================================================================================================
  parameters:
    Pageable:
      name: pageable
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/Pageable'
    UserId:
      in: path
      name: userId
      required: true
      description: Id of the user
      schema:
        type: integer
        format: int64
      example: '1'
    ProductId:
      in: path
      name: productId
      required: true
      description: ID of the product
      schema:
        type: string
        format: uuid
        example: '8efbee82-8a0c-407a-a4c0-16bbad40a23e'
    Language:
      in: query
      name: lang
      required: false
      schema:
        type: string
        default: uk
        nullable: false
        example: uk
      description: The language code for the product information (e.g., 'uk' for Ukrainian).
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

#RESPONSES
#=======================================================================================================================
  responses:
    CreatedResponse:
      description: Resource created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedResponse'

    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
          example:
            status: 404
            title: Not Found
            detail: The requested resource was not found

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
          example:
            status: 409
            title: Conflict
            detail: The requested has conflict

    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
          example:
            status: 400
            title: Bad Request
            detail: Invalid Request. Please, check the data in the request (QueryString Parameters and/or Body).

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
          example:
            status: 401
            title: Unauthorized
            detail: Unauthorized access to the resource

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorObject'
          example:
            status: 403
            title: Forbidden
            detail: User does not have success to this resource

#SCHEMAS
#=======================================================================================================================
  schemas:
    Pageable:
      type: object
      properties:
        page:
          type: integer
          minimum: 0
          default: 0
        size:
          type: integer
          minimum: 1
          default: 8
        sort:
          type: array
          items:
            type: string

    AbstractPage:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
          default: 0
        totalPages:
          type: integer
          default: 0
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
        numberOfElements:
          type: integer
        size:
          type: integer
        empty:
          type: boolean
        content:
          type: array
          items: { }

    SignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: example@mail.com
        password:
          type: string
          format: password
          example: Qwerty12345!
          pattern: ^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*#?&-_])[A-Za-z\d@$!%*#?&-_]{8,}$
          description: The password must contain at least 8 characters, one uppercase letter, one digit, and one special character.
      required:
        - email
        - password

    SignUpRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: example@mail.com
        password:
          type: string
          format: password
          example: Qwerty12345
          pattern: ^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*#?&-_])[A-Za-z\d@$!%*#?&-_]{8,}$
          description: The password must contain at least 8 characters, one uppercase letter, one digit, and one special character.
        firstName:
          type: string
          example: John
          minLength: 2
          maxLength: 50
          pattern: ^[a-zA-Zа-яА-ЯёЁіІїЇєЄ'’\-]+$
          description: First name must contain from 2 to 50 characters long and can only include Latin and Cyrillic letters, as well as apostrophes and hyphens.
        lastName:
          type: string
          example: Doe
          minLength: 2
          maxLength: 50
          pattern: ^[a-zA-Zа-яА-ЯёЁіІїЇєЄ'’\-]+$
          description: Last name must contain from 2 to 50 characters long and can only include Latin and Cyrillic letters, as well as apostrophes and hyphens.
      required:
        - email
        - password
        - firstName
        - lastName

    AuthTokenResponse:
      title: AuthTokenResponse
      type: object
      additionalProperties: false
      required:
        - token
      properties:
        token:
          type: string
      description: |
        Token claims description.            
        - `sub`: Subject of the token (email of the user)
        - `firstName`: First name of the user
        - `lastName`: First name of the user
        - `scope`: Role assigned to the user
        - `iss`: issuer(who created and signed this token)
        - `id`: id of the logged-in user
        - `exp`: Expiration time (timestamp)
        - `iat`: Issued at time (timestamp)
        
        Example JWT payload:
        
        ```json
        {
          "sub": "user@mail.com",
          "firstName": "user",
          "lastName": "user",
          "scope": "ROLE_USER",
          "iss": "self",
          "id": 2,
          "exp": 1720025093,
          "iat": 1720021493
        }
        ```
      example: eyJhbGciOiJIUzUxMiJ9.eyJyb2xlIjpbIkFETUlOIl0sInN1YiI6ImRtaWtoYWlsb3ZpY2gwM0BnbWFpbC5jb20iLCJpYXQiOjE3MTU4MDIyNTQsImV4cCI6MTcxNTkxMDI1NH0.pRIMnAzcdcvd2HkveUlLtgM9iCeek1UGew4JEt3oRzmNB80p795KSl9Tx7P0zqytK5_aH3Q-ydmrWUVELHy7Cg

    CreatedResponse:
      title: CreatedResponse
      type: object
      additionalProperties: false
      required:
        - message
      properties:
        message:
          type: string
          description: Creation status message
          example: Resource successfully created

    ProductRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ProductStatus'
        image:
          type: string
          example: https://example.com/image.jpg
          description: Image URL associated with the product.
        quantity:
          type: integer
          example: 10
          description: Quantity of the product
        price:
          type: number
          format: bigDecimal
          example: 999.99
          description: Price of the product
        tagIds:
          type: array
          description: Array of Tag IDs associated with the product
          items:
            type: integer
            format: int64
            example: 1, 2
            description: The unique identifiers of the tags.
        productTranslations:
          type: array
          items:
            $ref: '#/components/schemas/ProductTranslation'

    ProductResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/ProductStatus'
        image:
          type: string
        createdAt:
          type: string
          format: date-time
        quantity:
          type: integer
          example: 10
        price:
          type: number
          example: 999.99
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        productTranslations:
          type: array
          items:
            $ref: '#/components/schemas/ProductTranslation'

    ProductDetailsResponse:
      type: object
      properties:
        name:
          type: string
          example: "APPLE iPhone"
        description:
          type: string
          example: "Screen 6.1 Super Retina XDR, 2532x1170 / A16 Bionic chip"
        image:
          type: string
          example: "https://example.com/image.jpg"
        tags:
          type: array
          items:
            type: string
            example: "category:mobile, category:mobile"
        quantity:
          type: integer
          example: 10
        price:
          type: number
          example: 999.99


    ProductSearchResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Id of the product.
        image:
          type: string
          description: URL of the product image.
        name:
          type: string
          example: APPLE iPhone
          description: Name of the product.

    Tag:
      type: object
      properties:
        id:
          type: number
          format: id
          example: 1
        name:
          type: string
          example: category:mobile
          description: The name of the tag.

    ProductTranslation:
      type: object
      properties:
        name:
          type: string
          example: APPLE iPhone
          description: Name of the product.
        description:
          type: string
          example: Screen 6.1 Super Retina XDR, 2532x1170 / A16 Bionic chip
        languageCode:
          type: string
          example: en
          description: language

    ProductTranslationId:
      type: object
      properties:
        productId:
          type: string
          format: id
        languageId:
          type: number
          format: id

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/ProductStatus'
        image:
          type: string
        createdAt:
          type: string
          format: date-time
        quantity:
          type: integer
        price:
          type: number
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        productTranslations:
          type: array
          items:
            $ref: '#/components/schemas/ProductTranslation'

    ErrorObject:
      title: Unauthorized
      type: object
      additionalProperties: false
      properties:
        status:
          type: integer
          description: Error code
          minimum: 100
          maximum: 599
        title:
          type: string
          description: Error title
          maxLength: 100
        detail:
          type: string
          description: Details of the exception
      required:
        - status
        - title
        - detail

    UserOrder:
      type: object
      description: User's view of Order
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the order
        isPaid:
          type: boolean
          description: Indicates whether the order has been paid
        orderStatus:
          $ref: '#/components/schemas/OrderStatus'
        createdAt:
          type: string
          format: date-time
          description: The date and time when the order was created
        total:
          type: number
          format: decimal
          description: The total cost of the order
        receiver:
          $ref: '#/components/schemas/OrderReceiver'
        postAddress:
          $ref: '#/components/schemas/PostAddress'
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    ManagerOrderPreview:
      type: object
      description: Manager's view of Order
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the order
        isPaid:
          type: boolean
          description: Indicates whether the order has been paid
        orderStatus:
          $ref: '#/components/schemas/OrderStatus'
        availableStatuses:
          type: array
          items:
            $ref: '#/components/schemas/OrderStatus'
        createdAt:
          type: string
          format: date-time
          description: The date and time when the order was created
        editedAt:
          type: string
          format: date-time
          description: The date and time when the order was edited
        account:
          $ref: '#/components/schemas/AccountResponse'
        total:
          type: number
          format: decimal
          description: The total cost of the order
        receiver:
          $ref: '#/components/schemas/OrderReceiver'
        postAddress:
          $ref: '#/components/schemas/PostAddress'


    ManagerOrder:
      type: object
      description: Manager's view of Order
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the order
        isPaid:
          type: boolean
          description: Indicates whether the order has been paid
        orderStatus:
          $ref: '#/components/schemas/OrderStatus'
        createdAt:
          type: string
          format: date-time
          description: The date and time when the order was created
        editedAt:
          type: string
          format: date-time
          description: The date and time when the order was edited
        account:
          $ref: '#/components/schemas/AccountResponse'
        total:
          type: number
          format: decimal
          description: The total cost of the order
        receiver:
          $ref: '#/components/schemas/OrderReceiver'
        postAddress:
          $ref: '#/components/schemas/PostAddress'
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      properties:
        price:
          type: number
          format: decimal
          description: Price of the individual item
        quantity:
          type: integer
          description: Quantity of the item ordered
        product:
          $ref: '#/components/schemas/ProductPreview'

    OrderReceiver:
      type: object
      properties:
        firstName:
          type: string
          description: Receiver's first name
        lastName:
          type: string
          description: Receiver's last name
        email:
          type: string
          description: Receiver's email address

    PostAddress:
      type: object
      properties:
        deliveryMethod:
          $ref: '#/components/schemas/DeliveryMethod'
        city:
          type: string
          description: City of the delivery address
        department:
          type: string
          description: Department or region of the delivery address

    OrderStatus:
      type: string
      enum:
        - IN_PROGRESS
        - SHIPPED
        - DELIVERED
        - COMPLETED
        - CANCELED
      description: The various statuses an order can have
      example: IN_PROGRESS, SHIPPED, DELIVERED, COMPLETED, CANCELED

    AccountResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of the account.
        email:
          type: string
          format: email
          example: example@mail.com
          description: Email of the account.
        firstName:
          type: string
          example: John
          description: First name of the account.
        lastName:
          type: string
          example: Doe
          description: Last name of the account.

    DeliveryMethod:
      type: string
      enum:
        - NOVA
        - UKRPOSHTA
      description: The delivery methods available for shipping the order

    OrdersFilterParameters:
      type: object
      properties:
        accountEmail:
          type: string
          example: example@mail.com
          description: Search by email starting with query.
        deliveryMethods:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryMethod'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/OrderStatus'
        isPaid:
          type: boolean
          description: Indicates whether the order has been paid
        createdBefore:
          type: string
          format: date-time
          description: The date and time before the order was created
        createdAfter:
          type: string
          format: date-time
          description: The date and time after the order was created
        totalMore:
          type: number
          format: decimal
          description: The total cost of the order is more than
        totalLess:
          type: number
          format: decimal
          description: The total cost of the order is less than

    PageUserOrder:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/UserOrder'
              description: List of orders in the page

    PageProductSearchResult:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/ProductSearchResult'
              description: List of product search results in page

    PageManagerOrderPreview:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/ManagerOrderPreview'
              description: List of orders in the page

    PageProducts:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/ProductPreview'

    ProductPreview:
      type: object
      properties:
        id:
          type: string
          example: '123e4567-e89b-12d3-a456-426614174000'
          description: Product Id.
        name:
          type: string
          example: APPLE iPhone
          description: Name of the product.
        description:
          type: string
          example: Device type, operation system, etc.
          description: Product description
        status:
          type: string
          default: AVAILABLE
          enum:
            - AVAILABLE
            - END_SOON
            - ENDED
          example: AVAILABLE
          description: Status of the product's quantity
        tags:
          type: array
          description: List of tags associated with the product
          items:
            type: string
            example: category:electronics
            description: Tag title
        image:
          type: string
          example: https://example.com/image.jpg
          description: Image URLs associated with the product.
        price:
          type: number
          format: float
          example: 999.99
          description: Price of the product

    ProductStatus:
      type: string
      enum:
        - VISIBLE
        - HIDDEN
      example: VISIBLE
      description: Status of the product's visibility for users

    PlaceOrderRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Doe
          minLength: 2
          maxLength: 50
          pattern: ^[a-zA-Zа-яА-ЯёЁіІїЇєЄ'’\-]+$
          description: Last name must contain from 2 to 50 characters long and can only include Latin and Cyrillic letters, as well as apostrophes and hyphens.
        lastName:
          type: string
          example: Doe
          minLength: 2
          maxLength: 50
          pattern: ^[a-zA-Zа-яА-ЯёЁіІїЇєЄ'’\-]+$
          description: First name must contain from 2 to 50 characters long and can only include Latin and Cyrillic letters, as well as apostrophes and hyphens.
        email:
          type: string
          format: email
          example: example@mail.com
        deliveryMethod:
          $ref: '#/components/schemas/DeliveryMethod'
        city:
          type: string
          minLength: 2
          maxLength: 100
          description: city where department is located
          example: Lviv
        department:
          type: string
          minLength: 2
          maxLength: 100
          description: department of the post
          example: №1 Franka street, 7
      required:
        - city
        - deliveryMethod
        - department
        - email
        - firstName
        - lastName

    PlaceOrderResponse:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
          example: '8efbee82-8a0c-407a-a4c0-16bbad40a23e'
          description: id of recently created order
      required:
        - orderId

    CartItemsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalPrice:
          type: number
          format: double
          example: 1000.45
          description: total price of products in the cart
      required:
        - items
        - totalPrice

    CartItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          description: id of the product
          example: '8efbee82-8a0c-407a-a4c0-16bbad40a23e'
        image:
          type: string
          example: https://example.com/image.jpg
          description: Image URL associated with the product.
        name:
          type: string
          example: Iphone
        productPrice:
          type: number
          format: double
          example: 100.45
          description: price of products in the cart
        quantity:
          type: integer
          example: 2
          description: Quantity of the product in the cart.
        calculatedPrice:
          type: number
          format: double
          example: 200.90
          description: Price that include quantity of the product
      required:
        - productId
        - image
        - name
        - productPrice
        - quantity
        - calculatedPrice

    UpdatedCartItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          description: id of the product
          example: '8efbee82-8a0c-407a-a4c0-16bbad40a23e'
        quantity:
          type: integer
          example: 2
          description: Quantity of the product in the cart.
        productPrice:
          type: number
          format: bigDecimal
          example: 100.45
          description: price of products in the cart
        calculatedPrice:
          type: number
          format: bigDecimal
          example: 200.90
          description: Price that includes quantity of the product
        totalPrice:
          type: number
          format: bigDecimal
          example: 1000.45
          description: total price of products in the cart
      required:
        - productId
        - quantity
        - productPrice
        - calculatedPrice
        - totalPrice

    ProductTags:
      type: array
      items:
        type: string
        description: categories of the product
        example: 'category:computer'

    UpdateOrderStatusRequest:
      type: object
      properties:
        orderStatus:
          $ref: '#/components/schemas/OrderStatus'
        isPaid:
          type: boolean
          description: Indicates if the order is paid
          example: true
      required:
        - orderStatus

    OrderStatusInfo:
      type: object
      properties:
        availableStatuses:
          type: array
          items:
            $ref: '#/components/schemas/OrderStatus'
        isPaid:
          type: boolean
          description: Indicates if the order is paid
          example: true

    ProductManagementFilter:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ProductManagementStatus'
        searchByName:
          type: string
          description: field for searching products by name
          example: Laptop
        priceMore:
          type: number
          format: double
          example: 100.20
          minimum: 0
          description: The price of the product is more than
        priceLess:
          type: number
          format: double
          example: 200.20
          description: The price of the product is less than
        quantityMore:
          type: number
          format: int64
          example: 10
          minimum: 0
          description: The quantity of the product is more than
        quantityLess:
          type: number
          format: int64
          example: 20
          description: The quantity of the product is less than
        createdAfter:
          type: string
          format: date-time
          description: The date of product creation is after
        createdBefore:
          type: string
          format: date-time
          description:  The date of product creation is before
        tags:
          $ref: '#/components/schemas/ProductTags'

    ProductFilter:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/ProductTags'

    ProductManagementPage:
      allOf:
        - $ref: '#/components/schemas/AbstractPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/ProductManagementContent'
              description: List of orders in the page

    ProductManagementContent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '8efbee82-8a0c-407a-a4c0-16bbad40a23e'
          description: id of the product
        name:
          type: string
          description: name of the product
          example: Iphone
        imageLink:
          type: string
          description: name of the product
          example: https://images.org/image.png
        quantity:
          type: number
          format: int64
          example: 10
          minimum: 0
        price:
          type: number
          format: double
          example: 100.45
          minimum: 0
        createdAt:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/ProductManagementStatus'
        tags:
          $ref: '#/components/schemas/ProductTags'
      required:
        - id
        - name
        - imageLink
        - quantity
        - price
        - createdAt
        - status
        - tags

    ProductManagementStatus:
      type: string
      enum:
        - VISIBLE
        - HIDDEN
      example: VISIBLE
      description: Status of the product

    PageAccounts:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractPage'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/AccountResponseManagement'

    AccountResponseManagement:
      type: object
      properties:
        id:
          type: number
          format: id
          example: "1"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          default: ROLE_USER
          enum:
            - ROLE_USER
            - ROLE_ADMIN
            - ROLE_MANAGER
          example: "ROLE_USER"
        status:
          type: string
          default: ACTIVE
          enum:
            - ACTIVE
            - DEACTIVATED
          example: ACTIVE
          description: Account Status
        createdAt:
          type: string
          format: date-time

    AccountStatus:
      type: string
      enum:
        - ACTIVE
        - DEACTIVATED
      description: Status of the account

    AccountFilter:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/AccountStatus'
        role:
          $ref: '#/components/schemas/AccountManagementRoles'

    AccountManagementRoles:
      type: string
      enum:
        - USER
        - ADMIN
        - MANAGER
      description: Role of the account
